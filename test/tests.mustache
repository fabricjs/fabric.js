<!doctype html>
<html>

<head>
<title>Unit Tests</title>

<script src="/node_modules/qunit/qunit/qunit.js"></script>
<link rel="stylesheet" href="/node_modules/qunit/qunit/qunit.css"/>

<script src="/node_modules/pixelmatch/index.js"></script>

<script src="/node_modules/source-map-support/browser-source-map-support.js"></script>
<script>sourceMapSupport.install();</script>

<script src="/testem.js"></script>
{{#serve_files}}<script src="{{{src}}}"{{#attrs}} {{&.}}{{/attrs}}></script>{{/serve_files}}

<script>
// true when running from github action
window.CI = {{CI}};

// QUnit config
QUnit.config.reorder = false;
{{#qunit.filter}}QUnit.config.filter = {{qunit.filter}};{{/qunit.filter}}
QUnit.config.noglobals = true;
QUnit.config.hidepassed = true;
QUnit.config.testTimeout = {{qunit.timeout}};

// global error handling
window.addEventListener('unhandledrejection', (event) => {
  // prevent logging to console
  event.preventDefault();
  QUnit.onUncaughtException(event.reason);
});

window.addEventListener('error', (event) => {
  // prevent logging to console
  event.preventDefault();
  QUnit.onUncaughtException(event.error);
});

</script>

{{#visual}}
<script>

const testIdToFileMap = {};
{{launch}} && QUnit.testDone(test => appendTestResults(testIdToFileMap, test));
const RUNNER_ID = getRunnerId();

/**
 * visual testing
 * @param {*} callback 
 * @param {*} file 
 * @param {*} options 
 */
QUnit.assert.visualEqual = async function assertVisualEqual(callback, file, options) {
  const done = this.async();
  const result = await visualAssertion.call({
    pixelmatch,
    getGolden,
    goldenExists,
    generateGolden,
    shouldFailIfNotFound: () => {{CI}},
    shouldGenerateGolden: passing =>
      !this.todo && !options.testOnly && ((!passing && {{testActions.debug}}) || {{testActions.recreate}}),
    shouldDumpResults: passing => {{launch}} || !passing,
    dumpResults,
    testName: this.test.testName,
    moduleName: this.test.module.name
  }, callback, file, options);
  this.pushResult(result);
  const basename = /(.*)\..*/.exec(file)[1];
  testIdToFileMap[this.test.testId] = {
    name: file,
    basename,
    expected: `/results/${RUNNER_ID}/${basename}/expected.png`,
    actual: `/results/${RUNNER_ID}/${basename}/actual.png`,
    diff: `/results/${RUNNER_ID}/${basename}/diff.png`,
  };
  done();
}

function downloadGoldens() {
    const checkbox = document.getElementById('qunit-urlconfig-hidepassed');
    checkbox.checked && checkbox.click();
    document.querySelectorAll('[data-canvas-type="actual"] > canvas').forEach(canvas => {
        const link = document.createElement('a');
        link.href = fabric.util.toDataURL(canvas, 'png', 1);
        link.download = canvas.getAttribute('data-golden');
        link.click();
    });
}
</script>
{{/visual}}

{{#styles}}<link rel="stylesheet" href="{{.}}">{{/styles}}

</head>

<body>

<div id="qunit"></div>
<div id="qunit-fixture"></div>
<div id="qunit-testrunner-toolbar"></div>
<h2 id="qunit-userAgent"></h2>
<ol id="qunit-tests"></ol>

<canvas id="canvas" width="500" height="500"></canvas>
<canvas id="static-canvas" width="500" height="500"></canvas>

<template id="error_output">
    <table>
        <thead>
            <row>
                <th class="text-center">expected</th>
                <th class="text-center">actual</th>
                <th class="text-center">diff</th>
            </row>
        </thead>
        <tbody>
            <row>
                <td data-canvas-type="expected"></td>
                <td data-canvas-type="actual"></td>
                <td data-canvas-type="diff"></td>
            </row>
        </tbody>
    </table>
</template>

{{#visual}}
<footer>
    <button onclick="downloadGoldens()" class="tr-button">Download Goldens</button>
</footer>
{{/visual}}

</body>
</html>
