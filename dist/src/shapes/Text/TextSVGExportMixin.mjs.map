{"version":3,"file":"TextSVGExportMixin.mjs","sources":["../../../../src/shapes/Text/TextSVGExportMixin.ts"],"sourcesContent":["import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText } from './Text';\nimport { STROKE, FILL } from '../../constants';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n  ) {\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, config.NUM_FRACTION_DIGITS)}\" ` : '';\n\n    return `<tspan x=\"${toFixed(\n      left,\n      config.NUM_FRACTION_DIGITS,\n    )}\" y=\"${toFixed(\n      top,\n      config.NUM_FRACTION_DIGITS,\n    )}\" ${dySpan}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n"],"names":["multipleSpacesRegex","dblQuoteRegex","createSVGInlineRect","color","left","top","width","height","concat","createSVGRect","TextSVGExportMixin","FabricObjectSVGExportMixin","_toSVG","offsets","_getSVGLeftTopOffsets","textAndBg","_getSVGTextAndBg","textTop","textLeft","_wrapSVGTextAndBg","toSVG","reviver","_createBaseSVGMarkup","noStyle","withShadow","lineTop","getHeightOfLine","_ref","textBgRects","textSpans","noShadow","textDecoration","getSvgTextDecoration","join","fontFamily","replace","fontSize","fontStyle","fontWeight","direction","getSvgStyles","addPaintOrder","textTopOffset","textLeftOffset","lineOffset","backgroundColor","push","i","len","_textLines","length","_getLineLeftOffset","textBackgroundColor","styleHas","_setSVGTextLineBg","_setSVGTextLineText","_createTextCharSpan","char","styleDecl","styleProps","getSvgSpanStyles","trim","match","fillStyles","dy","deltaY","dySpan","toFixed","config","NUM_FRACTION_DIGITS","escapeXml","lineIndex","lineHeight","isJustify","textAlign","includes","JUSTIFY","line","actualStyle","nextStyle","charsToRender","charBox","style","boxWidth","timeToRender","_fontSizeFraction","charSpacing","__charBounds","kernedWidth","_reSpaceAndTab","test","getCompleteStyleDeclaration","hasStyleChanged","_getStyleDeclaration","leftOffset","heightOfLine","boxStart","currentColor","lastColor","getValueOfPropertyAt","j","_getSVGLineTopOffset","lineTopOffset","lastHeight","offset","_fontSizeMult","skipShadow","useWhiteSpace","strokeWidth","stroke","fill","colorPropToSVG","STROKE","FILL","filter","decoration"],"mappings":"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"}