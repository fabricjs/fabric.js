{"version":3,"file":"InteractiveObject.mjs","sources":["../../../../src/shapes/Object/InteractiveObject.ts"],"sourcesContent":["import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n"],"names":["InteractiveFabricObject","FabricObject","getDefaults","_objectSpread","ownDefaults","constructor","options","Object","assign","createControls","setOptions","controls","createObjectDefaultControls","_updateCacheCanvas","targetCanvas","canvas","noScaleCache","_currentTransform","transform","target","action","startsWith","SCALE","getActiveControl","key","__corner","control","coord","oCoords","undefined","findControl","pointer","forTouch","arguments","length","hasControls","cornerEntries","entries","i","corner","shouldActivate","touchCorner","calcOCoords","vpt","getViewportTransform","center","getCenterPoint","tMatrix","createTranslateMatrix","x","y","rMatrix","createRotateMatrix","angle","getTotalAngle","group","flipX","positionMatrix","multiplyTransformMatrices","startMatrix","finalMatrix","transformOptions","qrDecompose","calcTransformMatrix","scaleX","Math","abs","scaleY","dim","_calculateCurrentDimensions","coords","forEachControl","position","positionHandler","_calcCornerCoords","calcCornerCoords","cornerSize","touchCornerSize","setCoords","fn","drawSelectionBackground","ctx","selectionBackgroundColor","_activeObject","save","getRelativeCenterPoint","wh","translate","scale","rotate","degreesToRadians","fillStyle","fillRect","restore","strokeBorders","size","strokeRect","_drawBorders","styleOverride","borderColor","borderDashArray","strokeStyle","_setLineDash","drawControlsConnectingLines","_renderControls","hasBorders","styleOptions","shouldDrawBorders","shouldDrawControls","matrix","translateX","translateY","lineWidth","borderScaleFactor","parent","globalAlpha","isMoving","borderOpacityWhenMoving","drawBorders","drawControls","forActiveSelection","bbox","sizeAfterTransform","width","height","calcDimensionsMatrix","stroke","isStrokeAccountedForInDimensions","strokeUniform","Point","scalarAdd","getZoom","scalarMultiply","strokeWidth","ZERO","add","padding","shouldStroke","beginPath","withConnection","getVisibility","moveTo","lineTo","offsetX","offsetY","retinaScaling","getCanvasRetinaScaling","cornerStrokeColor","cornerDashArray","cornerColor","setTransform","transparentCorners","p","render","isControlVisible","controlKey","setControlVisible","visible","_controlsVisibility","setControlsVisibility","forEach","_ref","visibility","clearContextTop","restoreManually","contextTop","v","viewportTransform","clearRect","onDeselect","_options","onSelect","shouldStartDragging","_e","onDragStart","canDrop","renderDragSourceEffect","renderDropTargetEffect","_defineProperty","interactiveObjectDefaultValues"],"mappings":"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"}