{"version":3,"file":"dom.min.mjs","sources":["../../../../src/util/misc/dom.ts"],"sourcesContent":["import { getFabricDocument } from '../../env';\nimport type { ImageFormat } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {Number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n"],"names":["createCanvasElement","element","getFabricDocument","createElement","getContext","FabricError","createImage","copyCanvasElement","canvas","_newCanvas$getContext","newCanvas","width","height","drawImage","toDataURL","canvasEl","format","quality","concat","isHTMLCanvas","undefined"],"mappings":"uHAOaA,MAAAA,EAAsBA,KACjC,MAAMC,EAAUC,IAAoBC,cAAc,UAClD,IAAKF,QAAyC,IAAvBA,EAAQG,WAC7B,MAAM,IAAIC,EAAY,qCAExB,OAAOJ,CAAO,EAOHK,EAAcA,IACzBJ,IAAoBC,cAAc,OAOvBI,EACXC,IACsB,IAAAC,EACtB,MAAMC,EAAYV,IAIlB,OAHAU,EAAUC,MAAQH,EAAOG,MACzBD,EAAUE,OAASJ,EAAOI,OACAH,QAA1BA,EAAAC,EAAUN,WAAW,iBAAKK,GAA1BA,EAA4BI,UAAUL,EAAQ,EAAG,GAC1CE,CAAS,EAWLI,EAAYA,CACvBC,EACAC,EACAC,IACGF,EAASD,UAASI,SAAAA,OAAUF,GAAUC,GAE9BE,EACXX,KAESA,QAAuDY,IAA5CZ,EAA6BJ"}