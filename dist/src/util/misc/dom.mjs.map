{"version":3,"file":"dom.mjs","sources":["../../../../src/util/misc/dom.ts"],"sourcesContent":["import { getFabricDocument } from '../../env';\nimport type { ImageFormat } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {Number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n"],"names":["createCanvasElement","element","getFabricDocument","createElement","getContext","FabricError","createImage","copyCanvasElement","canvas","_newCanvas$getContext","newCanvas","width","height","drawImage","toDataURL","canvasEl","format","quality","concat","isHTMLCanvas","undefined"],"mappings":";;;AAGA;AACA;AACA;AACA;AACaA,MAAAA,mBAAmB,GAAGA,MAAyB;EAC1D,MAAMC,OAAO,GAAGC,iBAAiB,EAAE,CAACC,aAAa,CAAC,QAAQ,CAAC,CAAA;EAC3D,IAAI,CAACF,OAAO,IAAI,OAAOA,OAAO,CAACG,UAAU,KAAK,WAAW,EAAE;AACzD,IAAA,MAAM,IAAIC,WAAW,CAAC,mCAAmC,CAAC,CAAA;AAC5D,GAAA;AACA,EAAA,OAAOJ,OAAO,CAAA;AAChB,EAAC;;AAED;AACA;AACA;AACA;AACaK,MAAAA,WAAW,GAAGA,MACzBJ,iBAAiB,EAAE,CAACC,aAAa,CAAC,KAAK,EAAC;;AAE1C;AACA;AACA;AACA;AACA;AACaI,MAAAA,iBAAiB,GAC5BC,MAAyB,IACH;AAAA,EAAA,IAAAC,qBAAA,CAAA;AACtB,EAAA,MAAMC,SAAS,GAAGV,mBAAmB,EAAE,CAAA;AACvCU,EAAAA,SAAS,CAACC,KAAK,GAAGH,MAAM,CAACG,KAAK,CAAA;AAC9BD,EAAAA,SAAS,CAACE,MAAM,GAAGJ,MAAM,CAACI,MAAM,CAAA;EAChC,CAAAH,qBAAA,GAAAC,SAAS,CAACN,UAAU,CAAC,IAAI,CAAC,MAAAK,IAAAA,IAAAA,qBAAA,eAA1BA,qBAAA,CAA4BI,SAAS,CAACL,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AACnD,EAAA,OAAOE,SAAS,CAAA;AAClB,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaI,SAAS,GAAGA,CACvBC,QAA2B,EAC3BC,MAAmB,EACnBC,OAAe,KACZF,QAAQ,CAACD,SAAS,CAAAI,QAAAA,CAAAA,MAAA,CAAUF,MAAM,CAAA,EAAIC,OAAO,EAAC;AAEtCE,MAAAA,YAAY,GACvBX,MAAmC,IACH;EAChC,OAAO,CAAC,CAACA,MAAM,IAAKA,MAAM,CAAuBJ,UAAU,KAAKgB,SAAS,CAAA;AAC3E;;;;"}