{"version":3,"file":"objectTransforms.mjs","sources":["../../../../src/util/misc/objectTransforms.ts"],"sourcesContent":["import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n"],"names":["removeTransformFromObject","object","transform","inverted","invertTransform","finalTransform","multiplyTransformMatrices","calcOwnMatrix","applyTransformToObject","addTransformToObject","_qrDecompose","qrDecompose","translateX","translateY","scaleX","scaleY","otherOptions","_objectWithoutProperties","_excluded","center","Point","flipX","flipY","Object","assign","set","setPositionByOrigin","CENTER","resetObjectTransform","target","skewX","skewY","rotate","saveObjectTransform","angle","left","top","sizeAfterTransform","width","height","t","dimX","dimY","points","map","p","bbox","makeBoundingBoxFromPoints"],"mappings":"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"}