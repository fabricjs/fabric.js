{"version":3,"file":"wrapWithFixedAnchor.min.mjs","sources":["../../../src/controls/wrapWithFixedAnchor.ts"],"sourcesContent":["import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n"],"names":["wrapWithFixedAnchor","actionHandler","eventData","transform","x","y","target","originX","originY","centerPoint","getRelativeCenterPoint","constraint","translateToOriginPoint","actionPerformed","setPositionByOrigin"],"mappings":"AAQO,SAASA,EACdC,GAEA,MAAQ,CAACC,EAAWC,EAAWC,EAAGC,KAChC,MAAMC,OAAEA,EAAMC,QAAEA,EAAOC,QAAEA,GAAYL,EACnCM,EAAcH,EAAOI,yBACrBC,EAAaL,EAAOM,uBAAuBH,EAAaF,EAASC,GACjEK,EAAkBZ,EAAcC,EAAWC,EAAWC,EAAGC,GAQ3D,OALAC,EAAOQ,oBACLH,EACAR,EAAUI,QACVJ,EAAUK,SAELK,CAAe,CAE1B"}