import{defineProperty as a}from"../../_virtual/_rollupPluginBabelHelpers.min.mjs";import{Color as e}from"../color/Color.min.mjs";import{BaseFilter as o}from"./BaseFilter.min.mjs";import{classRegistry as t}from"../ClassRegistry.min.mjs";import{blendColorFragmentSource as r}from"./shaders/blendColor.min.mjs";const s={color:"#F95C63",mode:"multiply",alpha:1};class n extends o{getCacheKey(){return"".concat(this.type,"_").concat(this.mode)}getFragmentSource(){return"\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ".concat(r[this.mode],"\n        }\n      }\n      ")}applyTo2d(a){let{imageData:{data:o}}=a;const t=new e(this.color).getSource(),r=t[0]*this.alpha,s=t[1]*this.alpha,n=t[2]*this.alpha,i=1-this.alpha;for(let a=0;a<o.length;a+=4){const e=o[a],t=o[a+1],l=o[a+2];switch(this.mode){case"multiply":o[a]=e*r/255,o[a+1]=t*s/255,o[a+2]=l*n/255;break;case"screen":o[a]=255-(255-e)*(255-r)/255,o[a+1]=255-(255-t)*(255-s)/255,o[a+2]=255-(255-l)*(255-n)/255;break;case"add":o[a]=e+r,o[a+1]=t+s,o[a+2]=l+n;break;case"difference":o[a]=Math.abs(e-r),o[a+1]=Math.abs(t-s),o[a+2]=Math.abs(l-n);break;case"subtract":o[a]=e-r,o[a+1]=t-s,o[a+2]=l-n;break;case"darken":o[a]=Math.min(e,r),o[a+1]=Math.min(t,s),o[a+2]=Math.min(l,n);break;case"lighten":o[a]=Math.max(e,r),o[a+1]=Math.max(t,s),o[a+2]=Math.max(l,n);break;case"overlay":o[a]=r<128?2*e*r/255:255-2*(255-e)*(255-r)/255,o[a+1]=s<128?2*t*s/255:255-2*(255-t)*(255-s)/255,o[a+2]=n<128?2*l*n/255:255-2*(255-l)*(255-n)/255;break;case"exclusion":o[a]=r+e-2*r*e/255,o[a+1]=s+t-2*s*t/255,o[a+2]=n+l-2*n*l/255;break;case"tint":o[a]=r+e*i,o[a+1]=s+t*i,o[a+2]=n+l*i}}}sendUniformData(a,o){const t=new e(this.color).getSource();t[0]=this.alpha*t[0]/255,t[1]=this.alpha*t[1]/255,t[2]=this.alpha*t[2]/255,t[3]=this.alpha,a.uniform4fv(o.uColor,t)}}a(n,"defaults",s),a(n,"type","BlendColor"),a(n,"uniformLocations",["uColor"]),t.setClass(n);export{n as BlendColor,s as blendColorDefaultValues};
//# sourceMappingURL=BlendColor.min.mjs.map
