{"version":3,"file":"Brightness.mjs","sources":["../../../src/filters/Brightness.ts"],"sourcesContent":["import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = data[i] + brightness;\n      data[i + 1] = data[i + 1] + brightness;\n      data[i + 2] = data[i + 2] + brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n"],"names":["brightnessDefaultValues","brightness","Brightness","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","Math","round","i","length","isNeutralState","sendUniformData","gl","uniformLocations","uniform1f","uBrightness","_defineProperty","classRegistry","setClass"],"mappings":";;;;;AASO,MAAMA,uBAA2C,GAAG;AACzDC,EAAAA,UAAU,EAAE,CAAA;AACd,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,UAAU,SAASC,UAAU,CAAmC;AAgB3EC,EAAAA,iBAAiBA,GAAG;AAClB,IAAA,OAAOC,cAAc,CAAA;AACvB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACEC,SAASA,CAAAC,IAAA,EAA4C;IAAA,IAA3C;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,IAAAA;AAAK,OAAA;AAAoB,KAAC,GAAAF,IAAA,CAAA;IACjD,MAAMN,UAAU,GAAGS,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,UAAU,GAAG,GAAG,CAAC,CAAA;AACpD,IAAA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvCH,IAAI,CAACG,CAAC,CAAC,GAAGH,IAAI,CAACG,CAAC,CAAC,GAAGX,UAAU,CAAA;AAC9BQ,MAAAA,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGX,UAAU,CAAA;AACtCQ,MAAAA,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGX,UAAU,CAAA;AACxC,KAAA;AACF,GAAA;AAEAa,EAAAA,cAAcA,GAAG;AACf,IAAA,OAAO,IAAI,CAACb,UAAU,KAAK,CAAC,CAAA;AAC9B,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEc,EAAAA,eAAeA,CACbC,EAAyB,EACzBC,gBAA0C,EAC1C;IACAD,EAAE,CAACE,SAAS,CAACD,gBAAgB,CAACE,WAAW,EAAE,IAAI,CAAClB,UAAU,CAAC,CAAA;AAC7D,GAAA;AACF,CAAA;AAlDE;AACF;AACA;AACA;AACA;AACA;AACA;AANEmB,eAAA,CADWlB,UAAU,EAAA,MAAA,EAUP,YAAY,CAAA,CAAA;AAAAkB,eAAA,CAVflB,UAAU,EAAA,UAAA,EAYHF,uBAAuB,CAAA,CAAA;AAAAoB,eAAA,CAZ9BlB,UAAU,EAcK,kBAAA,EAAA,CAAC,aAAa,CAAC,CAAA,CAAA;AAuC3CmB,aAAa,CAACC,QAAQ,CAACpB,UAAU,CAAC;;;;"}