{"version":3,"file":"Saturation.min.mjs","sources":["../../../src/filters/Saturation.ts"],"sourcesContent":["import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n"],"names":["saturationDefaultValues","saturation","Saturation","BaseFilter","getFragmentSource","fragmentSource","applyTo2d","_ref","imageData","data","adjust","this","i","length","max","Math","sendUniformData","gl","uniformLocations","uniform1f","uSaturation","isNeutralState","_defineProperty","classRegistry","setClass"],"mappings":"2PASO,MAAMA,EAA8C,CACzDC,WAAY,GAYP,MAAMC,UAAmBC,EAiB9BC,iBAAAA,GACE,OAAOC,CACT,CAQAC,SAAAA,CAASC,GAA4C,IAAzCC,WAAWC,KAAEA,IAA0BF,EACjD,MAAMG,GAAUC,KAAKV,WACrB,IAAK,IAAIW,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAAG,CACvC,MAAME,EAAMC,KAAKD,IAAIL,EAAKG,GAAIH,EAAKG,EAAI,GAAIH,EAAKG,EAAI,IACpDH,EAAKG,IAAME,IAAQL,EAAKG,IAAME,EAAML,EAAKG,IAAMF,EAAS,EACxDD,EAAKG,EAAI,IAAME,IAAQL,EAAKG,EAAI,IAAME,EAAML,EAAKG,EAAI,IAAMF,EAAS,EACpED,EAAKG,EAAI,IAAME,IAAQL,EAAKG,EAAI,IAAME,EAAML,EAAKG,EAAI,IAAMF,EAAS,CACtE,CACF,CAQAM,eAAAA,CACEC,EACAC,GAEAD,EAAGE,UAAUD,EAAiBE,aAAcT,KAAKV,WACnD,CAEAoB,cAAAA,GACE,OAA2B,IAApBV,KAAKV,UACd,EAnDAqB,EADWpB,EAAU,OAWP,cAAYoB,EAXfpB,EAAU,WAaHF,GAAuBsB,EAb9BpB,EAee,mBAAA,CAAC,gBAwC7BqB,EAAcC,SAAStB"}