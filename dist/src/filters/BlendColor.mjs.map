{"version":3,"file":"BlendColor.mjs","sources":["../../../src/filters/BlendColor.ts"],"sourcesContent":["import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const tr = source[0] * this.alpha;\n    const tg = source[1] * this.alpha;\n    const tb = source[2] * this.alpha;\n    const alpha1 = 1 - this.alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          break;\n        case 'screen':\n          data[i] = 255 - ((255 - r) * (255 - tr)) / 255;\n          data[i + 1] = 255 - ((255 - g) * (255 - tg)) / 255;\n          data[i + 2] = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          data[i] = r + tr;\n          data[i + 1] = g + tg;\n          data[i + 2] = b + tb;\n          break;\n        case 'difference':\n          data[i] = Math.abs(r - tr);\n          data[i + 1] = Math.abs(g - tg);\n          data[i + 2] = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          data[i] = r - tr;\n          data[i + 1] = g - tg;\n          data[i + 2] = b - tb;\n          break;\n        case 'darken':\n          data[i] = Math.min(r, tr);\n          data[i + 1] = Math.min(g, tg);\n          data[i + 2] = Math.min(b, tb);\n          break;\n        case 'lighten':\n          data[i] = Math.max(r, tr);\n          data[i + 1] = Math.max(g, tg);\n          data[i + 2] = Math.max(b, tb);\n          break;\n        case 'overlay':\n          data[i] =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          data[i + 1] =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          data[i + 2] =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          data[i] = tr + r - (2 * tr * r) / 255;\n          data[i + 1] = tg + g - (2 * tg * g) / 255;\n          data[i + 2] = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          data[i] = tr + r * alpha1;\n          data[i + 1] = tg + g * alpha1;\n          data[i + 2] = tb + b * alpha1;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n"],"names":["blendColorDefaultValues","color","mode","alpha","BlendColor","BaseFilter","getCacheKey","concat","type","getFragmentSource","blendColorFragmentSource","applyTo2d","_ref","imageData","data","source","Color","getSource","tr","tg","tb","alpha1","i","length","r","g","b","Math","abs","min","max","sendUniformData","gl","uniformLocations","uniform4fv","uColor","_defineProperty","classRegistry","setClass"],"mappings":"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"}